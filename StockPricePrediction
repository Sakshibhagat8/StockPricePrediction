import tensorflow as tf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from tensorflow import keras
import seaborn as sns
import os
from datetime import datetime
import warnings
from sklearn.preprocessing import MinMaxScaler



warnings.filterwarnings("ignore")



data = pd.read_csv('all_stocks_5yr.csv')


data['date']=pd.to_datetime(data['date'])

companies=['AAPL','FB','AMZN','GOOGL','TSS','IBM','NVDA']
plt.figure(figsize=(15, 8))


#open and close price data analysis

for index, company in enumerate(companies, 1):
    plt.subplot(3, 3, index)
    c = data[data['Name'] == company]
    plt.plot(c['date'], c['close'], c='r', label="close", marker="+")
    plt.plot(c['date'], c['open'], c='g', label="open", marker="^")
    plt.title(company)
    plt.legend()
    plt.tight_layout()
plt.show()


#stock volume analysis over the years
plt.figure(figsize=(15, 8))
for index, company in enumerate(companies, 1):
    plt.subplot(3, 3, index)
    c = data[data['Name'] == company]
    plt.plot(c['date'], c['volume'], marker='*')
    plt.title(f"{company} Volume")
    plt.tight_layout()
plt.show()

#Analyzing the stock price of Google from 2013 to 2018

google=data[data['Name']=='GOOGL']
prediction_range=google.loc[(google['date']>datetime(2013,1,1)) & (google['date']>datetime(2018,1,1))]
plt.plot(google['date'],google['close'])
plt.xlabel('Date')
plt.ylabel('Close')
plt.title("Google stock price")
plt.show()


close_data = google.filter(['close'])
dataset = close_data.values
training = int(np.ceil(len(dataset) * .95))
print(training)
scaler=MinMaxScaler(feature_range=
                    (0,1))
scaled_data=scaler.fit_transform(dataset)

train_data = scaled_data[0:int(training), :]
# preparing feature and labels for training data set


x_train = []
y_train = []

for i in range(60, len(train_data)):
    x_train.append(train_data[i - 60:i, 0])
    y_train.append(train_data[i, 0])

x_train, y_train = np.array(x_train), np.array(y_train)
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

rnn_model=keras.models.Sequential([
    keras.layers.LSTM(units=64,
                      return_sequences=True,
                      input_shape=(x_train.shape[1],1)),
    keras.layers.LSTM(units=64),
    keras.layers.Dense(32),
    keras.layers.Dropout(0.5),
    keras.layers.Dense(1)])
rnn_model.summary()

rnn_model.compile(optimizer="adam",loss="mean_squared_error")
rnn_model.fit(x_train,y_train,epochs=50)

#creating testing data set


test_data = scaled_data[training - 60:, :]
x_test = []
y_test = dataset[training:, :]
for i in range(60, len(test_data)):
    x_test.append(test_data[i - 60:i, 0])

x_test = np.array(x_test)
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

# predict the testing data
predictions = rnn_model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

# evaluation metrics
mse = np.mean(((predictions - y_test) ** 2))
print("MSE", mse)
print("RMSE", np.sqrt(mse))

train = google[:training]
test = google[training:]
test['Predictions'] = predictions

plt.figure(figsize=(10, 8))
plt.plot(train['date'], train['close'])
plt.plot(test['date'], test[['close', 'Predictions']])
plt.title('Goole Stock Close Price')
plt.xlabel('Date')
plt.ylabel("Close")
plt.legend(['Train', 'Test', 'Predictions'])
plt.show()

